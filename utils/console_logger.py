# utils/console_logger.py
class ConsoleLogger:
    def __init__(self, use_russian=False, verbose=False):
        self.use_russian = use_russian
        self.verbose = verbose
        self.tool_names = {
            "nmap": {"ru": "–°–µ—Ç–µ–≤–æ–π —Å–∫–∞–Ω–µ—Ä (Nmap)", "en": "Network Mapper (Nmap)"},
            "sudomy": {
                "ru": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤ (Sudomy)",
                "en": "Subdomain Enumeration Tool (Sudomy)",
            },
        }

        self.messages = {
            "start_scan": {
                "en": "üöÄ Starting {} scan for: {}",
                "ru": "üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {} –¥–ª—è: {}",
            },
            "generating_command": {
                "en": "‚öôÔ∏è  Generating {} command...",
                "ru": "‚öôÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã {}...",
            },
            "command_generated": {
                "en": "‚úì {} command generated: {}",
                "ru": "‚úì –ö–æ–º–∞–Ω–¥–∞ {} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {}",
            },
            "starting_tool": {
                "en": "‚ñ∂Ô∏è  Starting {} scan...",
                "ru": "‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {}...",
            },
            "scan_complete": {
                "en": "‚úì {} scan completed successfully",
                "ru": "‚úì –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            },
            "analyzing_results": {
                "en": "üîç Analyzing {} results...",
                "ru": "üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ {}...",
            },
            "analysis_complete": {
                "en": "‚úì {} analysis completed",
                "ru": "‚úì –ê–Ω–∞–ª–∏–∑ {} –∑–∞–≤–µ—Ä—à–µ–Ω",
            },
            "generating_report": {
                "en": "üìù Generating {} report...",
                "ru": "üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ {}...",
            },
            "report_complete": {
                "en": "‚úì {} report generated successfully at: {}",
                "ru": "‚úì –û—Ç—á–µ—Ç {} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {}",
            },
            "creating_directory": {
                "en": "üìÅ Creating directory structure...",
                "ru": "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...",
            },
            "tool_output": {"en": "\nOutput from {}:\n{}\n", "ru": "\n–í—ã–≤–æ–¥ {}:\n{}\n"},
            "error": {"en": "‚ùå Error in {}: {}", "ru": "‚ùå –û—à–∏–±–∫–∞ –≤ {}: {}"},
        }

    def log(self, message_key, tool="", **kwargs):
        """Log message with optional tool name and parameters"""
        try:
            lang = "ru" if self.use_russian else "en"
            tool_name = (
                self.tool_names.get(tool, {}).get(lang, tool.upper()) if tool else ""
            )

            message = self.messages[message_key][lang]
            if tool:
                formatted_message = message.format(tool_name, *kwargs.values())
            else:
                formatted_message = message.format(*kwargs.values())

            print(formatted_message)

        except Exception as e:
            print(f"Logging error: {str(e)}")

    def log_tool_output(self, tool, output):
        """Log tool output only in verbose mode"""
        if self.verbose and output:
            lang = "ru" if self.use_russian else "en"
            tool_name = self.tool_names.get(tool, {}).get(lang, tool.upper())
            separator = "‚ïê" * 80
            print(f"\n{separator}")
            print(self.messages["tool_output"][lang].format(tool_name, output))
            print(f"{separator}\n")

    def log_error(self, tool, error):
        """Log error message"""
        lang = "ru" if self.use_russian else "en"
        tool_name = self.tool_names.get(tool, {}).get(lang, tool.upper())
        print(f"\n{self.messages['error'][lang].format(tool_name, error)}\n")
